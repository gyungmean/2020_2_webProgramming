/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.106
 * Generated at: 2021-05-15 13:02:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Problem_005f02;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Calendar;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


	//요일 색깔
	public String parseDay(int cnt, String day){
		String rslt = null;
		if(cnt % 7 == 6){//토
			rslt = "<font color = \"blue\">" + day + "</font>";
		}
		else if(cnt % 7 == 0){//일
			rslt = "<font color = \"red\">" + day + "</font>";
		}
		else{
			rslt = day;
		}
		return rslt;
	}
	
	//날짜 색깔
	public String colorDay(int cnt, int realDay){
		String rslt = null;
		if(cnt % 7 == 6){//토
			rslt = "<font color = \"blue\">" + realDay + "</font>";
		}
		else if(cnt % 7 == 0){//일
			rslt = "<font color = \"red\">" + realDay + "</font>";
		}
		else{
			rslt = Integer.toString(realDay);
		}
		return rslt;
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>calendar</title>\r\n");
      out.write("<style>\r\n");
      out.write("table{\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("\tmargin: auto;\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\twidth: 800px;\r\n");
      out.write("\theight: 90%;\r\n");
      out.write("}\r\n");
      out.write("th, td{\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("\tfont-size: 18px;\r\n");
      out.write("\tpadding: 7px;\r\n");
      out.write("}\r\n");
      out.write("#front{\r\n");
      out.write("\tmargin-bottom: 15px;\r\n");
      out.write("\tborder: 0px; \r\n");
      out.write("\tfont-size: 16px;\r\n");
      out.write("\tfont-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	out.print("<form method= get>");
	String sYear = request.getParameter("YEAR");
	String sMonth = request.getParameter("MONTH");
	
	Calendar today = Calendar.getInstance();//today's date
	
	int year, month;
	int todayyear = today.get(Calendar.YEAR);
	int todaymonth = today.get(Calendar.MONTH);
	int todaydate = today.get(Calendar.DATE);
	
	Calendar cal = Calendar.getInstance(); //calendar date
	
	if(sYear != null && sMonth != null){//request받아온게 있으면
		year = Integer.parseInt(sYear);
		month = Integer.parseInt(sMonth);
		//1월부터 12월까지. idx상으로 0-11
		if(month < 0){
			month = 11; 
			year = year-1; 
		}
		if(month > 11){ 
			month = 0; 
			year = year+1;
		}
	}
	else{//받아온게 없음.첫호출
		year = todayyear;
		month = todaymonth;
	}
	cal.set(year, month, 1);
	
	//-------달력 윗부분---------//
	out.print("<table id = 'front'><tr>");
	out.print("<td align = left id = 'front'>");
	out.print("<a href = \"calendar.jsp?YEAR=" + (year-1));
	out.println("&MONTH=" + month + "\">" +  "◀</a>" );
	out.print(year + "년");
	out.print("<a href = \"calendar.jsp?YEAR=" + (year+1));
	out.println("&MONTH=" + month + "\">" +  "▶</a>" );
	out.print("</td>");
	
	out.print("<td align = center id = 'front'>");
	out.print("<a href = \"calendar.jsp?YEAR=" + year);
	out.println("&MONTH=" + (month-1) + "\">" +  "◀</a>" );
	out.print((month+1) + "월");
	out.print("<a href = \"calendar.jsp?YEAR=" + year);
	out.println("&MONTH=" + (month+1) + "\">" +  "▶</a>" );
	out.print("</td>");
	
	out.print("<td align= right id = 'front'>");
	out.print(todayyear + "- " + (todaymonth+1) + "-" + todaydate + "</td>");
	out.print("</tr></table>");
	
	//------달력만들기----------//
	out.print("<table>");
	
	int endDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);//해당 월의 말일
	int startDay = cal.get(Calendar.DAY_OF_WEEK);//시작 날짜 요일
	int cnt = 0; //idx
	
	//요일 
	String[] weekand = {"일", "월", "화", "수", "목", "금", "토"};
	out.print("<tr>");
	for(int i = 0; i < weekand.length; i++){
		out.println("<th>" + parseDay(cnt, weekand[i]) + "</th>");
		cnt++;
	}
	out.print("</tr>");
	
	//빈칸출력
	for(int i = 0; i < (startDay-1); i++) {//시작날짜 요일-1까지 빈칸 출력 
	    out.println("<td>&nbsp;</td>");
	    cnt++;
	    if((cnt % 7) == 0) {//7의 배수마다 줄바꿈
	    	out.println("<tr>");
	    }
	   }
	   
	//날짜출력
	for(int i = 1; i <= endDay; i++) { //1일부터 말일까지 
		out.println("<td>" + colorDay(cnt, i) + "</td>");
	   	cnt++;
	    if((cnt % 7) == 0) {// 7의 배수이면 줄바꿈
	     	out.println("</tr><tr>");
	    }
	   }
	
	//말일 이후 빈칸출력
	while((cnt++)%7 != 0){//7의배수를 넘지 않는 선에서 빈칸 출력
		out.println("<td>&nbsp;</td>");
	}
	out.print("</tr>");
	
	out.print("</table>");	
	out.print("</form>");

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
